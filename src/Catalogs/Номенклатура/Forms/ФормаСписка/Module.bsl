//@skip-check module-structure-method-in-regions
&НаСервереБезКонтекста
Функция ПолучитьНачальныйКод()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Номенклатура.Код) КАК Код
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.Код), Выборка.Код+1, 1);
	Иначе 
		Возврат 1;
	КонецЕсли;	
КонецФункции	
	
&НаСервереБезКонтекста
Процедура Создать7000НаСервере()
	НачатьТранзакцию();	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Номенклатура");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		ПропуститьЧерез = ГСЧ.СлучайноеЧисло(1, 3000);
		
		ТекКод = ПолучитьНачальныйКод();
		
		Для Сч = 1 По 7000 Цикл
			Если ПропуститьЧерез = 0 Тогда
				ТекКод = ТекКод + ГСЧ.СлучайноеЧисло(1, 5);	
				ПропуститьЧерез = ГСЧ.СлучайноеЧисло(1, 3000);
			КонецЕсли; 
			
			НовЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовЭлемент.Код = ТекКод;
			НовЭлемент.Наименование = "Товар " + Строка(ТекКод);
			НовЭлемент.Записать();
			
			ТекКод = ТекКод + 100; //тест
			ПропуститьЧерез = ПропуститьЧерез - 1;
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки; 
		
КонецПроцедуры

&НаКлиенте
Процедура Создать7000(Команда)
	Создать7000НаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	//@skip-check use-non-recommended-method
	Сообщить("СписокПередНачаломИзменения");
КонецПроцедуры
